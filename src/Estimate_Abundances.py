#!/usr/bin/env python
# coding: utf-8

'''
Program developed at Pop lab at the CBCB, University of Maryland by 
Harihara Subrahmaniam Muralidharan, Nidhi Shah, Jacquelyn S Meisel. 
'''
from Compute_Contig_Coverage_Utility import *

parser = ap.ArgumentParser(description="binnacle: A tool for binning metagenomic datasets using assembly graphs and scaffolds generated by metacarvel.\
                           Estimate_Abundances.py estimates abundance for scaffolds generated by MetaCarvel. \
                           If the coordinates computed by binnacle is specified then the abundance \
                           for each scaffold is estimated based on the contig abundances and the coordinates. \
                           If the coordinates are not specified then binnacle etimates the abundance from scratch. \
                           While calculating all vs all abundances please specify the coordinates(Coordinates_After_Delinking.txt) through the \"coords\" parameter. \
                           The abundances can be provided as a bed file, bam file or a text file describing the per base coverage obtained by \
                           running the genomeCoverageBed program of the bedtools suite.")
parser.add_argument("-g","--assembly", help="Assembly Graph generated by Metacarvel", default="", required=False)
parser.add_argument("-a","--coverage", help="Output generated by running genomecov -d on the bed file generated by MetaCarvel.",default="", required=False)
parser.add_argument("-bam","--bamfile", help="Bam file from aligning reads to contigs",default="", required = False)
parser.add_argument("-bed","--bedfile", help="Bed file from aligning reads to contigs. If bed file is provided please provide a fasta file of the contigs",default="", required = False)
parser.add_argument("-c",'--contigs', help="Contigs generated by the assembler, contigs.fasta",default="", required=False)
parser.add_argument("-d","--dir", help="output directory for results", required=True)
parser.add_argument("-o","--coords", default="", help="Coordinate file generated by Binnacle", required=False)
parser.add_argument("-w","--window_size", default="1500",help="Size of the sliding window for computing test statistic to identify changepoints\
 in coverages (Default=1500)", required = False)
parser.add_argument("-t","--threshold", default="99",help="Threshold to identify outliers (Default=99)", required = False)
parser.add_argument("-n","--neighbor_cutoff", default="100", help="Filter size to identify outliers within (Defualt=100)", required = False)
parser.add_argument("-p","--poscutoff", default="100",help="Position cutoff to consider delinking (Default=100)", required = False)
parser.add_argument("-pre","--prefix", default="", help="Prefix to be attached to all outputs", required = False)

if(not(Check_Dependencies())):
    print("Fix Unmet Dependencies")
    sys.exit(1)

args = parser.parse_args()

graph_path = args.assembly
bed_path = args.bedfile
bam_path = args.bamfile
coverage_path  =  args.coverage
output_dir = args.dir
contigs_path = args.contigs
coords_path = args.coords
prefix = args.prefix
if len(prefix) == 0:
    head, tail = split(coverage_path)
    prefix = tail.replace(".txt","").replace(".bed","").replace(".bam","")

coverage_path  =  args.coverage
output_dir = args.dir
Contigs_Path = args.contigs
coords_path = args.coords
w = int(args.window_size)
t = float(args.threshold)
n = int(args.neighbor_cutoff)
p = int(args.poscutoff)

if output_dir[-1] != '/': output_dir = output_dir+'/'
if not isdir(output_dir): mkdir(output_dir)

coverage_path = Get_Coverage_Wrapper(bed_path, bam_path, coverage_path, contigs_path, coords_path, output_dir, prefix)

if coords_path == "":
    print('Estimating Abundance from scratch...')
    if graph_path == "":
        print('Please specify the path to the oriented.gml produced by running metacarvel...\n')
        sys.exit(1)
    if contigs_path == "":
        print('Please specify the path to the contigs.fasta...\n')
        sys.exit(1)
    G = nx.read_gml(graph_path)
    node_list = list(G.nodes())
    df_coverage, df_not_found_summary = Load_Read_Coverage(coverage_path, node_list, output_dir, prefix) 
    print('Loaded Coverage and Assembly Graph')
    Write_Coverage_Outputs(G, df_coverage, output_dir, w, t, n, p, prefix)
    Append_Removed_Contigs(output_dir, df_not_found_summary, prefix)
    coords_path = output_dir+'Coords_After_Delinking.txt'
    scaffolds_path = output_dir+'Scaffolds.fasta'
    if(not isfile(coords_path)):
        print("Error Estimating Coordinates")
        sys.exit(1)
    Write_Scaffolds(contigs_path, coords_path, scaffolds_path)
else:
    if(not isfile(coords_path)):
        print(coords_path + " file not found")
        sys.exit(1)
    df_coords = pd.read_csv(coords_path, names = ['cc_aft_dlink', 'cc_bef_dlink', 'Contig', 'Start', 'End', 'Ingraph', 'Length'], 
                            sep = '\t')
    df_coords['Contig'] = df_coords['Contig'].astype(str)
    df_coords_filtered = df_coords[df_coords['Ingraph'] == 1]
    node_list = df_coords_filtered['Contig'].tolist()
    df_coverage, df_not_found_summary = Load_Read_Coverage(coverage_path, node_list, output_dir, prefix) 
    df_summary = Estimate_Scaffold_Coverage_Coords(df_coverage, df_coords_filtered, df_not_found_summary)
    df_summary.to_csv(output_dir + prefix+'_Summary.txt', sep = '\t', header = False)
    print('Written Coverages')
